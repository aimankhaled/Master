@page "/OrderList"
@inject OrderConsumer _orderConsumer
@inject IModalService Modal
@inject IJSRuntime js
@if (isLoading)
{
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <p>Loading...</p>
    </div>

}
else
{
    <div class="order-container">
        <div class="col-12 row">
            <div class="col-12">
                <table class="table text-center">
                    <thead class="thead-dark">

                        <tr>
                            <th>Name</th>
                            <th>Amount</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var o in orders)
                        {
                            <tr>
                                <td>@o.OrderName</td>
                                <td>@Math.Round(o.Amount,4)</td>
                                <td><button class="btn-primary" @onclick="()=>SeeDetails(o.OrderId)">Details <i class="fa-solid fa-eye"></i></button></td>
                                <td><button class="btn-primary" @onclick="()=>PayOrder(o.OrderId)">Pay <i class="fa-solid fa-hand-holding-dollar"></i></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@code {
    bool isLoading = false;
    List<OrderViewModel> orders = new List<OrderViewModel>();
    List<ProductsViewModel> products = new List<ProductsViewModel>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var ordersRet = await _orderConsumer.GetAllNonPaidOrders();
        if (ordersRet.HasErrors)
        {
            await js.DisplayMessage("Error", ordersRet.Errors[0].Message, SweetAlertMessageType.error);
            return;
        }
        orders = ordersRet.Data;
        isLoading = false;
        StateHasChanged();
    }
    protected async Task SeeDetails(int orderId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(OrderItems.Order), orders.FirstOrDefault(x => x.OrderId == orderId));
        var formModal = Modal.Show<OrderItems>("Order Details", parameters, new ModalOptions()
            {
                // Class = "col-10 blazored-modal",
                Position = ModalPosition.Middle,
                Size = ModalSize.Medium,

            });
        var result = await formModal.Result;
    }

    protected async Task PayOrder(int orderId)
    {
        var ordRet = await _orderConsumer.PayOrder(orderId);
        if (ordRet.HasErrors || !ordRet.Data)
        {
            await js.DisplayMessage("Error", ordRet.Errors[0].Message, SweetAlertMessageType.error);
            return;
        }
        else
        {
            isLoading = true;

            await js.DisplayMessage("Success", "Order Paid Successfully", SweetAlertMessageType.success);
            var ordersRet = await _orderConsumer.GetAllNonPaidOrders();
            if (ordersRet.HasErrors)
            {
                await js.DisplayMessage("Error", ordersRet.Errors[0].Message, SweetAlertMessageType.error);
                return;
            }
            orders = ordersRet.Data;
            isLoading = false;

        }
        StateHasChanged();
    }

}
